# ROS packages required
import rospy
from eagerx_core.core import RxBridge, RxNode, RxObject, EAGERxEnv
from eagerx_core.utils.node_utils import configure_connections, launch_roscore
from eagerx_core.constants import process

if __name__ == '__main__':
    roscore = launch_roscore()  # First launch roscore

    rospy.init_node('eagerx_core', anonymous=True, log_level=rospy.INFO)

    # Process configuration (optional)
    node_p = process.NEW_PROCESS
    bridge_p = process.ENVIRONMENT

    # Define nodes
    # todo: Create pid node (ROS package, .yaml, .py)
    # pid = RxNode.create('pid', 'eagerx_node_pid', 'process', rate=1.0, process=node_p)

    # Define object
    pendulum = RxObject.create('pendulum', 'eagerx_object_pendulum', 'pendulum', sensors=['pos_vel', 'image'])

    # Define action/observations
    actions, observations = EAGERxEnv.create_actions(), EAGERxEnv.create_observations()

    # Define render (optional)
    render = EAGERxEnv.create_render(rate=20)

    # Connect nodes
    connections = [{'source': (pendulum, 'sensors', 'pos_vel'), 'target': (observations, 'pos_vel'), 'delay': 0.0},
                   {'source': (actions, 'torque'),              'target': (pendulum, 'actuators', 'torque'), 'delay': 0.0},
                   {'source': (pendulum, 'sensors', 'image'),   'target': (render, 'inputs', 'image')}
                   ]
    configure_connections(connections)

    # Define bridge
    # todo: setting env, sensor, actuator, and bridge rates to "20" somehow deadlocks (at supervisor?) setting env to a lower rate solves the problem...?
    # todo: change info msgs printed in .step() and reset() in supervisor to rospy.logdebug
    # todo: render --> add default_arg "visualize=False"
    # todo: env.render(mode="rgb_array") is not starting the render.
    # todo: make real_time_factor implementation faster, with time.sleep?
    bridge = RxBridge.create('eagerx_bridge_openai_classic_control', 'openai_bridge', rate=1, process=bridge_p, is_reactive=True, real_time_factor=0)

    # Initialize Environment
    env = EAGERxEnv(name='rx',
                    rate=1,
                    actions=actions,
                    observations=observations,
                    bridge=bridge,
                    nodes=[],
                    # nodes=[PID],
                    objects=[pendulum],
                    render=render,
                    # reset_fn=lambda env: {#'obj/N9': env.state_space.sample()['obj/N9'],
                    #                       'bridge/param_1': env.state_space.sample()['bridge/param_1']}
                    )

    # First reset
    obs = env.reset()
    env.render(mode='human')
    for j in range(20):
        print('\n[Episode %s]' % j)
        for i in range(200):
            action = env.action_space.sample()
            obs, reward, done, info = env.step(action)
            rgb = env.render(mode='rgb_array')
        obs = env.reset()
    print('\n[Finished]')
